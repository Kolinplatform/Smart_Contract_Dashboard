{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
func getExtKeyItemWhiteListStatus(account: String) = {
    "verifier_status_" + account 
}
func getExtValueItemWhiteListStatus(status: String) = {
    status
}
let verifier= "3NCKoFQxRf7zsDNbivLFw1oJ7y8qJzLmEs4"
let WHITELISTED = "WHITELISTED" 
let BLACKLISTED = "BLACKLISTED"
let INVITED = "INVITED"
let INVITEDMODERATOR = "INVITEDMODERATOR"
let INVITEDADMIN = "INVITEDADMIN"
let SPENDINVITE = "SPEND_INVITE"
let ADMIN = "ADMIN"
let MODERATOR = "MODERATOR"

#@Verifier(i)
 #   func verify() = {
  #      match i {
   #         case o: SetScriptTransaction => sigVerify(i.proofs[0], i.bodyBytes, base58'6KMPZeYtPd2PGkCrTio3BhGqeQrrtyQN9VQLp1Lm5PaL') 
    #        case _ => false
     #       }
    #}

@Callable(i)
func setstatus(account: String, status: String) ={
    let caller = toBase58String(i.caller.bytes)
    if ( caller != verifier && (getExtValueItemWhiteListStatus(caller) != MODERATOR || getExtValueItemWhiteListStatus(caller) != ADMIN) ) 
    then throw("only Kolin ADMINS or MODERATORS can manage the whitelist")
    else if ( caller != verifier && (status != WHITELISTED || status != BLACKLISTED || status != INVITED || status != INVITEDMODERATOR || status != INVITEDADMIN || status != MODERATOR || status != ADMIN || status != SPENDINVITE))
        then throw("status not recognised")
    else{
        WriteSet(
            [
                DataEntry(getExtKeyItemWhiteListStatus(account), status)
            ]
        )
    }
}
# WHITELISTED || BLACKLISTED || INVITED || MODERATOR || ADMIN || INVITEDMODERATOR || INVITEDADMIN
